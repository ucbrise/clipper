# automatically generated by the FlatBuffers compiler, do not modify

# namespace: clipper

import flatbuffers

class PredictRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPredictRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PredictRequest()
        x.Init(buf, n + offset)
        return x

    # PredictRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PredictRequest
    def IntegerData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .IntVec import IntVec
            obj = IntVec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PredictRequest
    def IntegerDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PredictRequest
    def FloatData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FloatVec import FloatVec
            obj = FloatVec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PredictRequest
    def FloatDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PredictRequest
    def DoubleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DoubleVec import DoubleVec
            obj = DoubleVec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PredictRequest
    def AllDoubleData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        double_vecs = []
        if o != 0:
            length = self._tab.VectorLen(o)
            x = self._tab.Vector(o)
            from .DoubleVec import DoubleVec
            for j in range(0, length):
                obj = DoubleVec()
                indirection_index = flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
                obj.Init(self._tab.Bytes, self._tab.Indirect(x + indirection_index))
                double_vecs.append(obj)
        return double_vecs

    # PredictRequest
    def DoubleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PredictRequest
    def StringData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .StringVec import StringVec
            obj = StringVec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PredictRequest
    def StringDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PredictRequest
    def ByteData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ByteVec import ByteVec
            obj = ByteVec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PredictRequest
    def ByteDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PredictRequestStart(builder): builder.StartObject(5)
def PredictRequestAddIntegerData(builder, integerData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(integerData), 0)
def PredictRequestStartIntegerDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PredictRequestAddFloatData(builder, floatData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(floatData), 0)
def PredictRequestStartFloatDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PredictRequestAddDoubleData(builder, doubleData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(doubleData), 0)
def PredictRequestStartDoubleDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PredictRequestAddStringData(builder, stringData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stringData), 0)
def PredictRequestStartStringDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PredictRequestAddByteData(builder, byteData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(byteData), 0)
def PredictRequestStartByteDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PredictRequestEnd(builder): return builder.EndObject()
