# automatically generated by the FlatBuffers compiler, do not modify

# namespace: clipper

import flatbuffers

class Request(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Request()
        x.Init(buf, n + offset)
        return x

    # Request
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Request
    def RequestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Request
    def PredictionRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PredictRequest import PredictRequest
            obj = PredictRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Request
    def FeedbackRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FeedbackRequest import FeedbackRequest
            obj = FeedbackRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RequestStart(builder): builder.StartObject(3)
def RequestAddRequestType(builder, requestType): builder.PrependInt8Slot(0, requestType, 0)
def RequestAddPredictionRequest(builder, predictionRequest): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(predictionRequest), 0)
def RequestAddFeedbackRequest(builder, feedbackRequest): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(feedbackRequest), 0)
def RequestEnd(builder): return builder.EndObject()
