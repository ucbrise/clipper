// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_RPC_CLIPPER_H_
#define FLATBUFFERS_GENERATED_RPC_CLIPPER_H_

#include "flatbuffers/flatbuffers.h"

namespace clipper {

struct IntVec;

struct FloatVec;

struct DoubleVec;

struct StringVec;

struct ByteVec;

struct Request;

struct PredictRequest;

struct FeedbackRequest;

enum RequestType {
  RequestType_Predict = 0,
  RequestType_Feedback = 1,
  RequestType_MIN = RequestType_Predict,
  RequestType_MAX = RequestType_Feedback
};

inline const char **EnumNamesRequestType() {
  static const char *names[] = { "Predict", "Feedback", nullptr };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) { return EnumNamesRequestType()[static_cast<int>(e)]; }

struct IntVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<int32_t> *data() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct IntVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int32_t>> data) { fbb_.AddOffset(IntVec::VT_DATA, data); }
  IntVecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  IntVecBuilder &operator=(const IntVecBuilder &);
  flatbuffers::Offset<IntVec> Finish() {
    auto o = flatbuffers::Offset<IntVec>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<IntVec> CreateIntVec(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> data = 0) {
  IntVecBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<IntVec> CreateIntVecDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *data = nullptr) {
  return CreateIntVec(_fbb, data ? _fbb.CreateVector<int32_t>(*data) : 0);
}

struct FloatVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<float> *data() const { return GetPointer<const flatbuffers::Vector<float> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct FloatVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) { fbb_.AddOffset(FloatVec::VT_DATA, data); }
  FloatVecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FloatVecBuilder &operator=(const FloatVecBuilder &);
  flatbuffers::Offset<FloatVec> Finish() {
    auto o = flatbuffers::Offset<FloatVec>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FloatVec> CreateFloatVec(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> data = 0) {
  FloatVecBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<FloatVec> CreateFloatVecDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr) {
  return CreateFloatVec(_fbb, data ? _fbb.CreateVector<float>(*data) : 0);
}

struct DoubleVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<double> *data() const { return GetPointer<const flatbuffers::Vector<double> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct DoubleVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<double>> data) { fbb_.AddOffset(DoubleVec::VT_DATA, data); }
  DoubleVecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DoubleVecBuilder &operator=(const DoubleVecBuilder &);
  flatbuffers::Offset<DoubleVec> Finish() {
    auto o = flatbuffers::Offset<DoubleVec>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<DoubleVec> CreateDoubleVec(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> data = 0) {
  DoubleVecBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DoubleVec> CreateDoubleVecDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *data = nullptr) {
  return CreateDoubleVec(_fbb, data ? _fbb.CreateVector<double>(*data) : 0);
}

struct StringVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct StringVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data) { fbb_.AddOffset(StringVec::VT_DATA, data); }
  StringVecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StringVecBuilder &operator=(const StringVecBuilder &);
  flatbuffers::Offset<StringVec> Finish() {
    auto o = flatbuffers::Offset<StringVec>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StringVec> CreateStringVec(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data = 0) {
  StringVecBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<StringVec> CreateStringVecDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *data = nullptr) {
  return CreateStringVec(_fbb, data ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*data) : 0);
}

struct ByteVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct ByteVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) { fbb_.AddOffset(ByteVec::VT_DATA, data); }
  ByteVecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ByteVecBuilder &operator=(const ByteVecBuilder &);
  flatbuffers::Offset<ByteVec> Finish() {
    auto o = flatbuffers::Offset<ByteVec>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ByteVec> CreateByteVec(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ByteVecBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<ByteVec> CreateByteVecDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  return CreateByteVec(_fbb, data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST_TYPE = 4,
    VT_PREDICTION_REQUEST = 6,
    VT_FEEDBACK_REQUEST = 8
  };
  RequestType request_type() const { return static_cast<RequestType>(GetField<int8_t>(VT_REQUEST_TYPE, 0)); }
  const PredictRequest *prediction_request() const { return GetPointer<const PredictRequest *>(VT_PREDICTION_REQUEST); }
  const FeedbackRequest *feedback_request() const { return GetPointer<const FeedbackRequest *>(VT_FEEDBACK_REQUEST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PREDICTION_REQUEST) &&
           verifier.VerifyTable(prediction_request()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FEEDBACK_REQUEST) &&
           verifier.VerifyTable(feedback_request()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(RequestType request_type) { fbb_.AddElement<int8_t>(Request::VT_REQUEST_TYPE, static_cast<int8_t>(request_type), 0); }
  void add_prediction_request(flatbuffers::Offset<PredictRequest> prediction_request) { fbb_.AddOffset(Request::VT_PREDICTION_REQUEST, prediction_request); }
  void add_feedback_request(flatbuffers::Offset<FeedbackRequest> feedback_request) { fbb_.AddOffset(Request::VT_FEEDBACK_REQUEST, feedback_request); }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    auto o = flatbuffers::Offset<Request>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb,
    RequestType request_type = RequestType_Predict,
    flatbuffers::Offset<PredictRequest> prediction_request = 0,
    flatbuffers::Offset<FeedbackRequest> feedback_request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_feedback_request(feedback_request);
  builder_.add_prediction_request(prediction_request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct PredictRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INTEGER_DATA = 4,
    VT_FLOAT_DATA = 6,
    VT_DOUBLE_DATA = 8,
    VT_STRING_DATA = 10,
    VT_BYTE_DATA = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<IntVec>> *integer_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IntVec>> *>(VT_INTEGER_DATA); }
  const flatbuffers::Vector<flatbuffers::Offset<FloatVec>> *float_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FloatVec>> *>(VT_FLOAT_DATA); }
  const flatbuffers::Vector<flatbuffers::Offset<DoubleVec>> *double_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DoubleVec>> *>(VT_DOUBLE_DATA); }
  const flatbuffers::Vector<flatbuffers::Offset<StringVec>> *string_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<StringVec>> *>(VT_STRING_DATA); }
  const flatbuffers::Vector<flatbuffers::Offset<ByteVec>> *byte_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ByteVec>> *>(VT_BYTE_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INTEGER_DATA) &&
           verifier.Verify(integer_data()) &&
           verifier.VerifyVectorOfTables(integer_data()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FLOAT_DATA) &&
           verifier.Verify(float_data()) &&
           verifier.VerifyVectorOfTables(float_data()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DOUBLE_DATA) &&
           verifier.Verify(double_data()) &&
           verifier.VerifyVectorOfTables(double_data()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_STRING_DATA) &&
           verifier.Verify(string_data()) &&
           verifier.VerifyVectorOfTables(string_data()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BYTE_DATA) &&
           verifier.Verify(byte_data()) &&
           verifier.VerifyVectorOfTables(byte_data()) &&
           verifier.EndTable();
  }
};

struct PredictRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_integer_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntVec>>> integer_data) { fbb_.AddOffset(PredictRequest::VT_INTEGER_DATA, integer_data); }
  void add_float_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FloatVec>>> float_data) { fbb_.AddOffset(PredictRequest::VT_FLOAT_DATA, float_data); }
  void add_double_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DoubleVec>>> double_data) { fbb_.AddOffset(PredictRequest::VT_DOUBLE_DATA, double_data); }
  void add_string_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StringVec>>> string_data) { fbb_.AddOffset(PredictRequest::VT_STRING_DATA, string_data); }
  void add_byte_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ByteVec>>> byte_data) { fbb_.AddOffset(PredictRequest::VT_BYTE_DATA, byte_data); }
  PredictRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PredictRequestBuilder &operator=(const PredictRequestBuilder &);
  flatbuffers::Offset<PredictRequest> Finish() {
    auto o = flatbuffers::Offset<PredictRequest>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<PredictRequest> CreatePredictRequest(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntVec>>> integer_data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FloatVec>>> float_data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DoubleVec>>> double_data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StringVec>>> string_data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ByteVec>>> byte_data = 0) {
  PredictRequestBuilder builder_(_fbb);
  builder_.add_byte_data(byte_data);
  builder_.add_string_data(string_data);
  builder_.add_double_data(double_data);
  builder_.add_float_data(float_data);
  builder_.add_integer_data(integer_data);
  return builder_.Finish();
}

inline flatbuffers::Offset<PredictRequest> CreatePredictRequestDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<IntVec>> *integer_data = nullptr,
    const std::vector<flatbuffers::Offset<FloatVec>> *float_data = nullptr,
    const std::vector<flatbuffers::Offset<DoubleVec>> *double_data = nullptr,
    const std::vector<flatbuffers::Offset<StringVec>> *string_data = nullptr,
    const std::vector<flatbuffers::Offset<ByteVec>> *byte_data = nullptr) {
  return CreatePredictRequest(_fbb, integer_data ? _fbb.CreateVector<flatbuffers::Offset<IntVec>>(*integer_data) : 0, float_data ? _fbb.CreateVector<flatbuffers::Offset<FloatVec>>(*float_data) : 0, double_data ? _fbb.CreateVector<flatbuffers::Offset<DoubleVec>>(*double_data) : 0, string_data ? _fbb.CreateVector<flatbuffers::Offset<StringVec>>(*string_data) : 0, byte_data ? _fbb.CreateVector<flatbuffers::Offset<ByteVec>>(*byte_data) : 0);
}

struct FeedbackRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FeedbackRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  FeedbackRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FeedbackRequestBuilder &operator=(const FeedbackRequestBuilder &);
  flatbuffers::Offset<FeedbackRequest> Finish() {
    auto o = flatbuffers::Offset<FeedbackRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<FeedbackRequest> CreateFeedbackRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  FeedbackRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

inline const clipper::Request *GetRequest(const void *buf) { return flatbuffers::GetRoot<clipper::Request>(buf); }

inline bool VerifyRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<clipper::Request>(nullptr); }

inline void FinishRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<clipper::Request> root) { fbb.Finish(root); }

}  // namespace clipper

#endif  // FLATBUFFERS_GENERATED_RPC_CLIPPER_H_
